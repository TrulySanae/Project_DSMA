# Tab = read.csv("/Users/sanaemessoudi/Desktop/DSMA/Project/Final_Datasets/Dataset_with_Cater_Latenight_Attire.csv")
Tab = read.csv("/Users/sanaemessoudi/Desktop/DSMA/Project/2a) Final_Datasets/Imputed_Dataset_with_Latenight_Attire_Table.csv")
#library(readxl)
#Tab = read_excel("Dateiname.xlsx")
summary(Tab)
summary(Tab)
str(Tab)
Var = Tab$week_hours
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_stars
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_review_count
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_popularity
boxplot(Var)
hist(Var)
summary(Var)
Tabelle = table(Tab$rating)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$rating)
Tabelle
barplot(Tabelle, main = "" )
# Load necessary libraries (if needed)
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
# Function to check for class imbalance
check_imbalance <- function(data, column) {
# Calculate class distribution
class_counts <- data %>%
group_by(!!sym(column)) %>%
summarize(count = n()) %>%
ungroup()
# Calculate proportions
total <- sum(class_counts$count)
proportions <- class_counts$count / total
# Imbalance Ratio (IR)
imbalance_ratio <- max(class_counts$count) / min(class_counts$count)
# Shannon Entropy
shannon_entropy <- -sum(proportions * log2(proportions))
max_entropy <- log2(length(class_counts$count))
entropy_ratio <- shannon_entropy / max_entropy
# Decision and explanation
if (imbalance_ratio > 1.5 || entropy_ratio < 0.8) {
imbalance_statement <- paste(
"The dataset is imbalanced. The imbalance ratio is",
round(imbalance_ratio, 2),
"and the Shannon Entropy ratio is",
round(entropy_ratio, 2),
"indicating a skew in class distribution."
)
} else {
imbalance_statement <- paste(
"The dataset is not significantly imbalanced. The imbalance ratio is",
round(imbalance_ratio, 2),
"and the Shannon Entropy ratio is",
round(entropy_ratio, 2),
"indicating a fairly balanced class distribution."
)
}
# Output results
print(class_counts)
print(imbalance_statement)
}
# Example Usage
# Create a sample dataset
set.seed(42)
data <- data.frame(ratings = sample(c(0, 1), size = 4457, replace = TRUE, prob = c(0.55, 0.45)))
# Check for imbalance
check_imbalance(data, "ratings")
Var = Tab$week_hours
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_stars
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_review_count
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_popularity
boxplot(Var)
hist(Var)
summary(Var)
Tabelle = table(Tab$rating_price)
Tabelle
barplot(Tabelle, main = "" )
Var = Tab$rating_review_count
boxplot(Var)
hist(Var)
summary(Var)
Var = Tab$rating_popularity
boxplot(Var)
hist(Var)
summary(Var)
Tabelle = table(Tab$rating_price)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$social_media)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_intimate)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_touristy)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_hipster)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_divey)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_classy)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_upscale)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_casual)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$ambiance_romantic)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_breakfast)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_brunch)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_lunch)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_dinner)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_dessert)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$meals_latenight)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_parking)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_credit_cards)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_outdoor_seating)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_tv)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$reservations)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$service_table_service)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$service_good_for_kids)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$service_good_for_groups)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$collect_takeout)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$collect_delivery)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_attire_casual)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_attire_dressy)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_wifi_free)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$attr_wifi_paid)
Tabelle
barplot(Tabelle, main = "" )
Tabelle = table(Tab$info_state)
Tabelle
barplot(Tabelle, main = "" )
AVar = Tab$rating
UVar = Tab$week_hours
plot(AVar,UVar)
abline(lm(AVar~UVar))
boxplot(Tab$week_hours~Tab$rating)
mean(Tab$week_hours[Tab$rating== 1])
mean(Tab$week_hours[Tab$rating== 0])
boxplot(Tab$rating_stars~Tab$rating)
mean(Tab$rating_stars[Tab$rating== 1])
mean(Tab$rating_stars[Tab$rating== 0])
boxplot(Tab$NumVar~Tab$rating)
# Define the list of column names
columns <- c("week_hours", "rating_stars", "rating_review_count", "rating_popularity") # Replace with your column names
# Loop through each column name and perform the operations
for (col_name in columns) {
cat("Analysis for:", col_name, "\n")
# Dynamically create the boxplot
boxplot(Tab[[col_name]] ~ Tab$rating, main = paste("Boxplot of", col_name, "by Rating"))
# Calculate the means for each rating
for (rating_value in unique(Tab$rating)) {
mean_value <- mean(Tab[[col_name]][Tab$rating == rating_value], na.rm = TRUE)
cat("Mean for rating", rating_value, ":", mean_value, "\n")
}
cat("\n") # Add spacing between analyses
}
columns <- c(
"rating_price",
"social_media",
"ambiance_intimate",
"ambiance_touristy",
"ambiance_hipster",
"ambiance_divey",
"ambiance_classy",
"ambiance_upscale",
"ambiance_casual",
"ambiance_trendy",
"ambiance_romantic",
"meals_breakfast",
"meals_brunch",
"meals_lunch",
"meals_dinner",
"meals_dessert",
"meals_latenight",
"attr_parking",
"attr_credit_cards",
"attr_outdoor_seating",
"attr_tv",
"reservations",
"service_table_service",
"service_good_for_kids",
"service_good_for_groups",
"collect_takeout",
"collect_delivery",
"alcohol",
"attr_attire_casual",
"attr_attire_dressy",
"attr_wifi_free",
"attr_wifi_paid")
# Print the dynamically generated column names (optional)
cat("Dynamically detected columns:\n")
# Loop through each column and calculate the table
for (col_name in columns) {
cat("\nAnalysis for:", col_name, "\n")
# Dynamically create the table
if (is.numeric(Tab[[col_name]]) || is.factor(Tab[[col_name]])) {
# Only proceed for numeric or factor columns
table_output <- table(Tab[[col_name]], Tab$rating)
# Add labels to the axes and print
cat("Contingency Table for", col_name, "vs Rating:\n")
cat("Rows: Categories of", col_name, "\n")
cat("Columns: Ratings\n\n")
print(table_output)
} else {
cat("Skipping non-numeric/non-factor column:", col_name, "\n")
}
}
# Print the dynamically generated column names (optional)
cat("Dynamically detected columns:\n")
print(columns)
# Loop through each column and calculate the table and boxplot
for (col_name in columns) {
cat("\nAnalysis for:", col_name, "\n")
# Dynamically create the table (if numeric or factor)
if (is.numeric(Tab[[col_name]]) || is.factor(Tab[[col_name]])) {
table_output <- table(Tab[[col_name]], Tab$rating)
# Print the table with labels
cat("Contingency Table for", col_name, "vs rating:\n")
print(table_output)
} else {
cat("Skipping non-numeric/non-factor column:", col_name, "\n")
}
# Generate boxplots for numeric columns
if (is.numeric(Tab[[col_name]])) {
boxplot(
Tab[[col_name]] ~ Tab$rating,
main = paste("Boxplot of", col_name, "by Rating"),
xlab = "Rating",
ylab = col_name,
col = "lightblue"  # Optional: Add color for visualization
)
}
}
library(dplyr)
library(tidyr)
library(bayesm)
library(cgwtools)
phone_data <- read.csv("/Users/sanaemessoudi/Desktop/CSCC/Phone_Features/Project/Restructured_and_DummyCoded_Dataset.csv")  # on the road usage
print(head(phone_data))
ncol(phone_data)
p=4 # size of choice sets
T=15 # number of choice tasks per respondent
hilf <-function(input,p,T){
input=input[,-c(1:4)] # get rid of the first three columns containing ID, task, and product number
N=dim(input)[1]/T/p #determine the number respondents
cy=dim(input)[2]  #position of choice variable
nb=dim(input)[2] - 1 #columns in the design matrix
yl=input[,cy] # logical index of chosen alternatives
yar=array(yl,dim=c(p,T,N))  # choices in dummy format
Xmat=input[,-cy]  # covariates
attributelabels <- colnames(Xmat) #using the names in the original files is safer and reproducible
Xar=array(t(Xmat),dim=c(nb,p*T,N)) # design vectors in "variables x (setsize x T) x respondents" format
lgtdata=NULL
#### Create objects for individual level analysis
for (i in 1:N){
y=double(T)
for (t in 1:T){
y[t]=which(yar[,t,i]==1)   # which of the three alternatives was chosen?
}
X=t(Xar[-nb,,i]) # get rid of the 'outside' design column for identification
# note that this is not sufficient for identification yet
colnames(X) <- attributelabels[-nb] # can't use the "none" label anymore because this columns was just deleted
lgtdata[[i]]=list(y=y, X=X)
}
return(list(lgtdata=lgtdata,Xmat=Xmat,yl=yl)) }
Phone=hilf(phone_data,p,T)
View(Phone)
View(phone_data)
View(phone_data)
View(phone_data)
```{r}
Tab = read.csv('/Users/sanaemessoudi/Desktop/CSCC/Phone_Features/Merge_Data/1b) Restructured_and_DummyCoded_Dataset.csv')
```{r}
Tab = read.csv('/Users/sanaemessoudi/Desktop/CSCC/Phone_Features/Merge_Data/1b) Restructured_and_DummyCoded_Dataset.csv')
View(Tab)
```{r}
summary(Tab)
# Print the dynamically generated column names (optional)
cat("Dynamically detected columns:\n")
print(columns)
# Loop through each column and calculate the table and boxplot
for (col_name in columns) {
cat("\nAnalysis for:", col_name, "\n")
# Dynamically create the table (if numeric or factor)
if (is.numeric(Tab[[col_name]]) || is.factor(Tab[[col_name]])) {
table_output <- table(Tab[[col_name]], Tab$rating)
# Print the table with labels
cat("Contingency Table for", col_name, "vs rating:\n")
print(table_output)
} else {
cat("Skipping non-numeric/non-factor column:", col_name, "\n")
}
# Generate boxplots for numeric columns
if (is.numeric(Tab[[col_name]])) {
boxplot(
Tab[[col_name]] ~ Tab$rating,
main = paste("Boxplot of", col_name, "by Rating"),
xlab = "Rating",
ylab = col_name,
col = "lightblue"  # Optional: Add color for visualization
)
}
}
install.packages("shiny")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
library(shiny)
library(ggplot2)
library(dplyr)
# Sample Data
df <- data.frame(
Day = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"),
Visitors = c(100, 120, 130, 140, 200, 220, 180)
)
# Define UI for application
ui <- fluidPage(
titlePanel("Dynamic Revenue Prediction Dashboard"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("ambiance", "Select Ambiance",
choices = c("Romantic", "Casual", "Trendy"), selected = "Romantic"),
checkboxGroupInput("service", "Select Service",
choices = c("Good for Kids"), selected = "Good for Kids")
),
mainPanel(
plotOutput("revenue_plot")
)
)
)
# Define server logic
server <- function(input, output) {
# Reactive function to calculate revenue
calculate_revenue <- reactive({
df <- df  # Use the data frame with your logic for calculating revenue
# Example: Adjust revenue based on ambiance selection
multiplier <- if ("Romantic" %in% input$ambiance) 1.2 else 1
df$Revenue <- df$Visitors * multiplier
df
})
# Generate the plot
output$revenue_plot <- renderPlot({
data <- calculate_revenue()
ggplot(data, aes(x = Day, y = Revenue, fill = Day)) +
geom_bar(stat = "identity") +
labs(title = "Predicted Revenue for Each Day", y = "Revenue")
})
}
# Run the application
shinyApp(ui = ui, server = server)
